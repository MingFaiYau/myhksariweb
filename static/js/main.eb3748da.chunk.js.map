{"version":3,"sources":["common/color.ts","common/size.ts","common/tool.ts","component/indicator.tsx","component/circleStatusView.tsx","component/header.tsx","api/index.ts","container/mainPage.tsx","app.tsx","serviceWorker.ts","i18n/en.ts","i18n/zh.ts","index.tsx"],"names":["color","size","valueTo3Dig","value","toString","Indicator","props","loading","classes","useStyles","className","container","CircularProgress","progress","makeStyles","top","left","position","display","flexDirection","flex","width","height","alignItems","alignContent","justifyContent","theme","justifyItems","circle","background","txtValue","fontSize","fontWeight","txtTitle","marginTop","textAlign","withWidth","React","memo","margin","title","titleColor","circleSize","circleStyle","borderRadius","style","tool","id","Header","header","banner","bannerTriangle","bannerbody","txtBanner","backgroundColor","right","borderTop","borderRight","borderBottom","marginLeft","fetchData","a","uri","fetch","method","headers","response","status","json","console","log","MainPage","useState","setLoading","sariResult","setSariResult","useEffect","then","data","features","length","result","attributes","content","dateView","txtDate","values","date","moment","last_edited_date","format","firstDataView","txtConfirmed","Number_of_confirmed_cases","txtConfirmedTitle","secondDataView","Discharged","Death","lastDataView","txtInvesting","Number_of_cases_still_hospitali","txtInvestingTitle","txtRef","lineHeight","padding","CssBaseline","Boolean","window","location","hostname","match","en","app_name","date_statu_as","title_confirmed_cases","title_hospitalised","title_discharged","title_death","title_investigation","ref","zh","ReactDOM","render","navigator","language","locale","setLocale","string","includes","key","defaultLocale","messages","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb3748da.chunk.js","sourcesContent":["const color = {\n\tmain: '#ff0',\n\ttransparent: 'transparent',\n\n\twhite: '#fff',\n\tblack: '#000',\n\tindicator: '#ABCABC',\n\n\theader: '#E3E3E3',\n    banner: '#FFD205',\n    footer: '#FF9B4D',\n\tcircle: '#E3E3E3',\n\n    txtConfirmed: '#FF734A',\n    txtInHospital: '#0288B3',\n\ttxtDischarged: '#3F7C06',\n\ttxtDead: '#581845',\n}\n\nexport { color }\n","const size = {\n    header: 50,\n    banner: 50,\n\n}\n\nexport { size }\n","export const valueTo3Dig = (value: number): string => {\n\tif (value > 99) {\n\t\treturn value.toString()\n\t} else if (value > 10) {\n\t\treturn `0` + value.toString()\n\t} else {\n\t\treturn `00` + value.toString()\n\t}\n}\n","import React from 'react'\nimport { CircularProgress } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { color } from '../common'\n\ninterface IndicatorProps {\n\tloading: boolean\n}\n\nconst Indicator: React.FC<IndicatorProps> = (props) => {\n\tconst { loading } = props\n\tconst classes = useStyles()\n\t\n\tif (!loading) return null\n\treturn (\n\t\t<div className={classes.container}>\n\t\t\t<CircularProgress className={classes.progress} />\n\t\t</div>\n\t)\n}\n\nconst useStyles = makeStyles({\n\tcontainer: {\n\t\ttop: 0,\n\t\tleft: 0,\n\t\tposition: 'fixed',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\talignItems: 'center',\n\t\talignContent: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tprogress: {\n\t\theight: 100,\n\t\twidth: 100,\n\t\tcolor: color.indicator,\n\t},\n})\n\nexport { Indicator }\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { color, size, tool } from '../common'\nimport withWidth, { isWidthUp, isWidthDown } from '@material-ui/core/withWidth'\n\ninterface ICircleStatusViewProps {\n\twidth: Breakpoint\n\tmargin?: string\n\tvalue: number\n\ttitle: string\n\ttitleColor: string\n}\n\nconst CircleStatusView: React.FC<ICircleStatusViewProps> = (props) => {\n\tconst { width, margin = '0', value, title, titleColor } = props\n\tconst classes = useStyles()\n\n\tlet circleSize = '100px'\n\tif (width === 'xs') {\n\t\tcircleSize = 'calc( ( 100vw - 60px ) / 3 )'\n\t} else {\n\t\tcircleSize = `${(600 * 0.8) / 3}px`\n\t}\n\n\tconst circleStyle = {\n\t\theight: circleSize,\n\t\twidth: circleSize,\n\t\tborderRadius: circleSize,\n\t}\n\n\treturn (\n\t\t<div className={classes.container} style={{ margin: margin }}>\n\t\t\t<div className={classes.circle} style={circleStyle}>\n\t\t\t\t<div className={classes.txtValue} style={{ color: titleColor }}>\n\t\t\t\t\t{tool.valueTo3Dig(value)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={classes.txtTitle} style={{ color: titleColor }}>\n\t\t\t\t<FormattedMessage id={title} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst useStyles = makeStyles((theme) => ({\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'center',\n\t\tjustifyItems: 'center',\n\t\talignItems: 'center',\n\t},\n\tcircle: {\n\t\tdisplay: 'flex',\n\t\tbackground: color.circle,\n\t\tjustifyContent: 'center',\n\t\tjustifyItems: 'center',\n\t\talignItems: 'center',\n\t},\n\ttxtValue: {\n\t\tfontSize: '30px',\n\t\tfontWeight: 'bold',\n\t},\n\ttxtTitle: {\n\t\tmarginTop: 10,\n\t\ttextAlign: 'center',\n\t\tfontSize: 16,\n\t\tfontWeight: 'bold',\n\t},\n}))\n\nexport default withWidth()(React.memo(CircleStatusView))\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { color, size } from '../common'\n\n// interface IHeaderProps {}\n\nconst Header: React.FC<{}> = (props) => {\n\tconst classes = useStyles()\n\treturn (\n\t\t<div className={classes.container}>\n\t\t\t<div className={classes.header} />\n\t\t\t<div className={classes.banner}>\n\t\t\t\t<div className={classes.bannerTriangle} />\n\t\t\t\t<div className={classes.bannerbody}>\n\t\t\t\t\t<span className={classes.txtBanner}>\n\t\t\t\t\t\t<FormattedMessage id='app_name' />\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst useStyles = makeStyles({\n\tcontainer: {\n\t\tposition: 'relative',\n\t\theight: size.header / 4 + size.banner,\n\t},\n\theader: {\n\t\theight: size.header,\n\t\tbackgroundColor: color.header,\n\t},\n\tbanner: {\n\t\tposition: 'absolute',\n\t\theight: size.banner,\n\t\twidth: '80%',\n\t\ttop: size.header / 4,\n\t\tright: 0,\n\t\tbackgroundColor: color.transparent,\n\t},\n\tbannerTriangle: {\n\t\tposition: 'absolute',\n\t\twidth: 0,\n\t\theight: 0,\n\t\tborderTop: `${size.banner / 2}px solid ${color.transparent}`,\n\t\tborderRight: `${size.banner / 3}px solid ${color.banner}`,\n\t\tborderBottom: `${size.banner / 2}px solid ${color.transparent}`,\n\t},\n\tbannerbody: {\n\t\tdisplay: 'flex',\n\t\theight: size.banner,\n\t\tmarginLeft: size.banner / 3,\n\t\talignItems: 'center',\n\t\tbackgroundColor: color.banner,\n\t},\n\ttxtBanner: {\n\t\tmarginLeft: 10,\n\t\tfontSize: 14,\n\t\tfontWeight: 'bold',\n\t\tcolor: color.black,\n\t},\n})\n\nexport { Header }\n","export const fetchData = async (): Promise<ISARIApiResult | null> => {\n\tconst action = 'LatestReport_LIM_View'\n\tconst uri = `https://services8.arcgis.com/PXQv9PaDJHzt8rp0/arcgis/rest/services/${action}/FeatureServer/0/query?f=json&where=1%3D1&outFields=*`\n\ttry {\n\t\tconst response = await fetch(uri, {\n\t\t\tmethod: 'Get',\n\t\t\theaders: {\n\t\t\t\t// 'Access-Control-Allow-Origin:': '*',\n\t\t\t\t// 'Access-Control-Allow-Methods': '*',\n\t\t\t\t// 'Access-Control-Allow-Headers': 'content-type,token,id',\n\t\t\t\t// 'Access-Control-Request-Headers': 'Origin, X-Requested-With, content-Type, Accept, Authorization',\n\t\t\t\t// 'Cache-Control': 'no-cache',\n\t\t\t},\n\t\t})\n\n\t\tif (response.status === 200) {\n\t\t\treturn response.json()\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t} catch (ex) {\n\t\tconsole.log('response ex', ex)\n\n\t\treturn null\n\t}\n}\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Indicator, CircleStatusView, Header } from '../component'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { fetchData } from '../api'\nimport { color, tool } from '../common'\n\nconst MainPage: React.FC<{}> = () => {\n\tconst [loading, setLoading] = React.useState<boolean>(true)\n\tconst [sariResult, setSariResult] = React.useState<ISARIResult | null>(null)\n\tconst classes = useStyles()\n\n\tReact.useEffect(() => {\n\t\tfetchData().then((data) => {\n\t\t\tif (data?.features && data.features.length > 0) {\n\t\t\t\tconst result = data.features[0].attributes\n\t\t\t\tsetSariResult(result)\n\t\t\t} else {\n\t\t\t\tsetSariResult(null)\n\t\t\t}\n\t\t\tsetLoading(false)\n\t\t})\n\t}, [])\n\n\tconst content = sariResult ? (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<div className={classes.dateView}>\n\t\t\t\t<span className={classes.txtDate}>\n\t\t\t\t\t<FormattedMessage\n\t\t\t\t\t\tid='date_statu_as'\n\t\t\t\t\t\tvalues={{\n\t\t\t\t\t\t\tdate: moment(sariResult.last_edited_date).format('YYYY-MM-DD HH:mm'),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className={classes.firstDataView}>\n\t\t\t\t<div className={classes.txtConfirmed}>\n\t\t\t\t\t{tool.valueTo3Dig(sariResult.Number_of_confirmed_cases)}\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.txtConfirmedTitle}>\n\t\t\t\t\t<FormattedMessage id='title_confirmed_cases' />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={classes.secondDataView}>\n\t\t\t\t<CircleStatusView\n\t\t\t\t\tvalue={\n\t\t\t\t\t\tsariResult.Number_of_confirmed_cases -\n\t\t\t\t\t\tsariResult.Discharged -\n\t\t\t\t\t\tsariResult.Death\n\t\t\t\t\t}\n\t\t\t\t\ttitle='title_hospitalised'\n\t\t\t\t\ttitleColor={color.txtInHospital}\n\t\t\t\t/>\n\t\t\t\t<CircleStatusView\n\t\t\t\t\tmargin='0 20px'\n\t\t\t\t\tvalue={sariResult.Discharged}\n\t\t\t\t\ttitle='title_discharged'\n\t\t\t\t\ttitleColor={color.txtDischarged}\n\t\t\t\t/>\n\t\t\t\t<CircleStatusView\n\t\t\t\t\tvalue={sariResult.Death}\n\t\t\t\t\ttitle='title_death'\n\t\t\t\t\ttitleColor={color.txtDead}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.lastDataView}>\n\t\t\t\t<div className={classes.txtInvesting}>\n\t\t\t\t\t{tool.valueTo3Dig(sariResult.Number_of_cases_still_hospitali)}\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.txtInvestingTitle}>\n\t\t\t\t\t<FormattedMessage id='title_investigation' />\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.txtRef}>\n\t\t\t\t\t<FormattedMessage id='ref' />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t) : null\n\treturn (\n\t\t<div>\n\t\t\t{content}\n\t\t\t<Indicator loading={loading} />\n\t\t</div>\n\t)\n}\n\nconst useStyles = makeStyles({\n\tdateView: {\n\t\tdisplay: 'flex',\n\t\tmargin: '5px 10px 5px 0px',\n\t\tjustifyContent: 'flex-end',\n\t},\n\ttxtDate: {\n\t\tfontSize: 14,\n\t\tfontWeight: 'bold',\n\t},\n\tfirstDataView: {\n\t\tmargin: 20,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t},\n\ttxtConfirmed: {\n\t\tfontSize: 100,\n\t\tlineHeight: '90px',\n\t\tfontWeight: 'bold',\n\t\ttextAlign: 'center',\n\t\tcolor: color.txtConfirmed,\n\t},\n\ttxtConfirmedTitle: {\n\t\tfontSize: 18,\n\t\tfontWeight: 'bold',\n\t\ttextAlign: 'center',\n\t\tcolor: color.txtConfirmed,\n\t},\n\tsecondDataView: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t\tmargin: '25px 10px 30px 10px',\n\t},\n\tlastDataView: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tbackgroundColor: color.footer,\n\t\tpadding: '30px 10px 0px 10px',\n\t},\n\ttxtInvesting: {\n\t\tfontSize: 50,\n\t\tfontWeight: 'bold',\n\t\ttextAlign: 'center',\n\t\tcolor: color.white,\n\t},\n\ttxtInvestingTitle: {\n\t\tfontSize: 18,\n\t\tfontWeight: 'bold',\n\t\ttextAlign: 'center',\n\t\tcolor: color.white,\n\t},\n\ttxtRef: {\n\t\tmarginTop: 20,\n\t\tfontSize: 12,\n\t\ttextAlign: 'end',\n\t\tfontWeight: 'bold',\n\t\tcolor: color.black,\n\t},\n})\n\nexport { MainPage }\n","import React from 'react'\nimport { MainPage } from './container'\nimport { CssBaseline } from '@material-ui/core'\n\ninterface IAppProps {\n\tsetLocale: (locale: string) => void\n}\n\nconst App: React.FC<IAppProps> = () => {\n\treturn (\n\t\t<div>\n\t\t\t<CssBaseline />\n\t\t\t<MainPage />\n\t\t</div>\n\t)\n}\n\nexport default React.memo(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ninterface Config {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker === null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config?.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config?.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType !== null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","const en = {\n\tapp_name: '2019nCoV - HONG KONG CASES',\n\tdate_statu_as: 'Status as of {date}',\n\n\ttitle_confirmed_cases: 'confirmed cases',\n\ttitle_hospitalised: 'hospitalised',\n\ttitle_discharged: 'discharged',\n\ttitle_death: 'death',\n\ttitle_investigation: 'Cases being hospitalised for investigation',\n\n\tref:\n\t\t'Figures are extracted from The Centre for Health Protection (CHP) of the Department of Health (DH), HKSAR Government.',\n}\n\nexport default en\n","const zh = {\n\tapp_name: '2019nCoV - HONG KONG CASES',\n\tdate_statu_as: '最新更新時間 : {date}',\n\n\ttitle_confirmed_cases: '確診個案',\n\ttitle_hospitalised: '住院中',\n\ttitle_discharged: '治愈',\n\ttitle_death: '死亡',\n\ttitle_investigation: '懷疑個案（住院觀察中）',\n\n\tref: '數據來自香港政府衞生署衞生防護中心',\n}\n\nexport default zh\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\nimport { IntlProvider } from 'react-intl'\nimport en from './i18n/en'\nimport zh from './i18n/zh'\n\nconst Root: React.FC<{}> = () => {\n\tconst [locale, setLocale] = React.useState<string>(navigator.language)\n\tconst string = locale.includes('zh') ? zh : en\n\treturn (\n\t\t<IntlProvider locale={locale} key={locale} defaultLocale='zh' messages={string}>\n\t\t\t<App setLocale={setLocale} />\n\t\t</IntlProvider>\n\t)\n}\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}