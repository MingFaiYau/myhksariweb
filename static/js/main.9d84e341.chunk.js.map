{"version":3,"sources":["component/indicator.tsx","common/color.ts","api/index.ts","container/mainPage.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["Indicator","props","loading","classes","useStyles","className","container","CircularProgress","progress","makeStyles","top","left","position","display","flexDirection","flex","width","height","alignItems","alignContent","justifyContent","color","fetchData","a","uri","fetch","method","headers","response","status","json","MainPage","React","useState","setLoading","useEffect","then","data","console","log","Grid","direction","justify","item","md","sm","xs","memo","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNASMA,EAAsC,SAACC,GAAW,IAC/CC,EAAYD,EAAZC,QACFC,EAAUC,IAChB,OAAKF,EAEJ,yBAAKG,UAAWF,EAAQG,WACvB,kBAACC,EAAA,EAAD,CAAkBF,UAAWF,EAAQK,YAHlB,MAQhBJ,EAAYK,YAAW,CAC5BH,UAAW,CACVI,IAAK,EACLC,KAAM,EACNC,SAAU,QACVC,QAAS,OACTC,cAAe,SACfC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,WAAY,SACZC,aAAc,SACdC,eAAgB,UAEjBZ,SAAU,CACTS,OAAQ,IACRD,MAAO,IACPK,MCnCY,a,iCCFDC,EAAS,uCAAG,8BAAAC,EAAA,4DACT,wBACTC,EAFkB,6EACT,wBADS,2EAIAC,MAAMD,EAAK,CACjCE,OAAQ,MACRC,QAAS,CACR,eAAgB,sBAPK,UAWC,OAPlBC,EAJiB,QAWVC,OAXU,0CAYfD,EAASE,QAZM,iCAcf,MAde,mFAiBhB,MAjBgB,0DAAH,qDCKhBC,EAAyB,WAAO,IAAD,EACNC,IAAMC,UAAkB,GADlB,mBAC7B/B,EAD6B,KACpBgC,EADoB,KAQpC,OANAF,IAAMG,WAAU,WACfb,IAAYc,MAAK,SAACC,GACjBC,QAAQC,IAAIF,GACZH,GAAW,QAEV,IAEF,6BACC,kBAACM,EAAA,EAAD,CAAMlC,WAAS,EAACmC,UAAU,SAASC,QAAQ,SAASxB,WAAW,UAC9D,kBAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC9B,yCAGF,kBAAC,EAAD,CAAW5C,QAASA,MCPR8B,MAAMe,MATK,WACzB,OACC,6BACC,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,UCIiBC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMxB,MAAK,SAACyB,GACnCA,EAAaC,kB","file":"static/js/main.9d84e341.chunk.js","sourcesContent":["import React from 'react'\nimport { CircularProgress } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { color } from '../common'\n\ninterface IndicatorProps {\n\tloading: boolean\n}\n\nconst Indicator: React.FC<IndicatorProps> = (props) => {\n\tconst { loading } = props\n\tconst classes = useStyles()\n\tif (!loading) return null\n\treturn (\n\t\t<div className={classes.container}>\n\t\t\t<CircularProgress className={classes.progress} />\n\t\t</div>\n\t)\n}\n\nconst useStyles = makeStyles({\n\tcontainer: {\n\t\ttop: 0,\n\t\tleft: 0,\n\t\tposition: 'fixed',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tflex: 1,\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\talignItems: 'center',\n\t\talignContent: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tprogress: {\n\t\theight: 100,\n\t\twidth: 100,\n\t\tcolor: color.indicator,\n\t},\n})\n\nexport { Indicator }\n","const color = {\n    main: '#ff0',\n    indicator:'#ABCABC'\n}\n\nexport { color }\n","export const fetchData = async () => {\n\tconst action = 'LatestReport_LIM_View'\n\tconst uri = `https://services8.arcgis.com/PXQv9PaDJHzt8rp0/arcgis/rest/services/${action}/FeatureServer/0/query?f=json&where=1%3D1&outFields=*`\n\ttry {\n\t\tconst response = await fetch(uri, {\n\t\t\tmethod: 'Get',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json',\n\t\t\t},\n\t\t})\n\n\t\tif (response.status === 200) {\n\t\t\treturn response.json()\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t} catch (ex) {\n\t\treturn null\n\t}\n}\n","import React from 'react'\nimport { Indicator } from '../component'\nimport { Grid } from '@material-ui/core'\nimport { fetchData } from '../api'\n\nconst MainPage: React.FC<{}> = () => {\n\tconst [loading, setLoading] = React.useState<boolean>(true)\n\tReact.useEffect(() => {\n\t\tfetchData().then((data) => {\n\t\t\tconsole.log(data)\n\t\t\tsetLoading(false)\n\t\t})\n\t}, [])\n\treturn (\n\t\t<div>\n\t\t\t<Grid container direction='column' justify='center' alignItems='center'>\n\t\t\t\t<Grid item md={12} sm={12} xs={12}>\n\t\t\t\t\t<span>total</span>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<Indicator loading={loading} />\n\t\t</div>\n\t)\n}\n\nexport { MainPage }\n","import React from 'react'\nimport { CssBaseline } from '@material-ui/core'\nimport { MainPage } from './container'\n\nconst App: React.FC<{}> = () => {\n\treturn (\n\t\t<div>\n\t\t\t<CssBaseline />\n\t\t\t<MainPage />\n\t\t</div>\n\t)\n}\n\nexport default React.memo(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ninterface Config {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker === null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config?.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config?.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType !== null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}